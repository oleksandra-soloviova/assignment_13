{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["const cells = document.querySelectorAll<HTMLButtonElement>(\".cell\");\r\nconst statusText = document.getElementById(\"status\") as HTMLElement;\r\nconst resetButton = document.getElementById(\"reset\") as HTMLButtonElement;\r\n\r\nlet currentPlayer = \"X\";\r\n\r\n// Initialize the game\r\nstatusText.textContent = \"Current Player: X\"; // Set initial status\r\n\r\ncells.forEach(cell => {\r\n    cell.addEventListener(\"click\", function () {\r\n        // Only allow marking the cell if it's empty\r\n        if (this.textContent === \"\") {\r\n            this.textContent = currentPlayer; // Mark the cell with the current player's symbol\r\n\r\n            // Check for a winner after each move\r\n            if (checkWinner()) {\r\n                statusText.textContent = `${currentPlayer} Wins!`;\r\n                disableBoard();\r\n            } else if ([...cells].every(c => c.textContent !== \"\")) {\r\n                // If all cells are filled and no winner, it's a draw\r\n                statusText.textContent = \"It's a Draw!\";\r\n            } else {\r\n                // If there's no winner and the board isn't full, change the current player\r\n                currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n                statusText.textContent = `Current Player: ${currentPlayer}`;\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n// Function to check if any player has won\r\nfunction checkWinner(): boolean {\r\n    const winningCombos = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n        [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\n    return winningCombos.some(combo => {\r\n        const [a, b, c] = combo;\r\n        return cells[a].textContent &&\r\n            cells[a].textContent === cells[b].textContent &&\r\n            cells[a].textContent === cells[c].textContent;\r\n    });\r\n}\r\n\r\n// Disable all cells (when there's a winner)\r\nfunction disableBoard() {\r\n    cells.forEach(cell => cell.disabled = true);\r\n}\r\n\r\n// Reset the game state\r\nresetButton.addEventListener(\"click\", () => {\r\n    cells.forEach(cell => {\r\n        cell.textContent = \"\"; // Clear the cell content\r\n        cell.disabled = false; // Enable the cell again\r\n    });\r\n    currentPlayer = \"X\"; // Reset the current player to X\r\n    statusText.textContent = \"Current Player: X\"; // Reset status text\r\n});\r\n"],
  "mappings": "AAAA,MAAM,QAAQ,SAAS,iBAAoC,OAAO;AAClE,MAAM,aAAa,SAAS,eAAe,QAAQ;AACnD,MAAM,cAAc,SAAS,eAAe,OAAO;AAEnD,IAAI,gBAAgB;AAGpB,WAAW,cAAc;AAEzB,MAAM,QAAQ,UAAQ;AAClB,OAAK,iBAAiB,SAAS,WAAY;AAEvC,QAAI,KAAK,gBAAgB,IAAI;AACzB,WAAK,cAAc;AAGnB,UAAI,YAAY,GAAG;AACf,mBAAW,cAAc,GAAG,aAAa;AACzC,qBAAa;AAAA,MACjB,WAAW,CAAC,GAAG,KAAK,EAAE,MAAM,OAAK,EAAE,gBAAgB,EAAE,GAAG;AAEpD,mBAAW,cAAc;AAAA,MAC7B,OAAO;AAEH,wBAAgB,kBAAkB,MAAM,MAAM;AAC9C,mBAAW,cAAc,mBAAmB,aAAa;AAAA,MAC7D;AAAA,IACJ;AAAA,EACJ,CAAC;AACL,CAAC;AAGD,SAAS,cAAuB;AAC5B,QAAM,gBAAgB;AAAA,IAClB,CAAC,GAAG,GAAG,CAAC;AAAA,IAAG,CAAC,GAAG,GAAG,CAAC;AAAA,IAAG,CAAC,GAAG,GAAG,CAAC;AAAA,IAC9B,CAAC,GAAG,GAAG,CAAC;AAAA,IAAG,CAAC,GAAG,GAAG,CAAC;AAAA,IAAG,CAAC,GAAG,GAAG,CAAC;AAAA,IAC9B,CAAC,GAAG,GAAG,CAAC;AAAA,IAAG,CAAC,GAAG,GAAG,CAAC;AAAA,EACvB;AAEA,SAAO,cAAc,KAAK,WAAS;AAC/B,UAAM,CAAC,GAAG,GAAG,CAAC,IAAI;AAClB,WAAO,MAAM,CAAC,EAAE,eACZ,MAAM,CAAC,EAAE,gBAAgB,MAAM,CAAC,EAAE,eAClC,MAAM,CAAC,EAAE,gBAAgB,MAAM,CAAC,EAAE;AAAA,EAC1C,CAAC;AACL;AAGA,SAAS,eAAe;AACpB,QAAM,QAAQ,UAAQ,KAAK,WAAW,IAAI;AAC9C;AAGA,YAAY,iBAAiB,SAAS,MAAM;AACxC,QAAM,QAAQ,UAAQ;AAClB,SAAK,cAAc;AACnB,SAAK,WAAW;AAAA,EACpB,CAAC;AACD,kBAAgB;AAChB,aAAW,cAAc;AAC7B,CAAC;",
  "names": []
}
